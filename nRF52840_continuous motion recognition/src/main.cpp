 /* Edge Impulse Arduino examples
 * Copyright (c) 2021 EdgeImpulse Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Includes ---------------------------------------------------------------- */
#include <Continuous_Motion_Recognition_inferencing.h>
#include <Arduino.h>

static const float features[] = {
    // copy raw features here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-arduino
    4.9000, -8.3900, -2.7200, 12.1700, -81.8900, -53.4400, 3.4500, -8.4800, -3.3900, 8.7300, -75.9800, -47.5100, 2.6700, -8.8300, -3.8300, 1.3700, -55.9200, -50.7600, 3.4300, -9.3300, -3.5400, -10.4600, -21.5700, -59.5600, 5.6300, -8.6500, -2.8900, -22.6300, -5.5400, -53.5100, 7.1500, -7.9300, -3.2300, -26.7900, -29.0800, -40.5700, 6.8600, -7.9800, -4.9500, -23.6600, -41.9800, -17.9200, 6.1100, -8.0700, -5.6900, -10.8800, -19.6100, 3.8100, 5.9900, -8.6400, -4.8700, 0.3300, 4.2800, 21.4000, 6.3100, -8.5300, -3.7300, -3.2400, 15.3700, 31.5700, 6.2100, -8.2200, -3.5200, -10.2200, 14.2800, 50.2500, 5.3200, -8.2500, -4.1600, -9.4800, 8.8000, 66.6900, 4.5500, -8.2900, -4.3800, -1.3400, 12.4400, 78.7800, 3.8800, -8.4600, -4.4000, -0.6800, 30.4800, 92.8400, 3.4700, -8.2500, -4.2100, -3.9200, 44.6800, 105.7100, 2.7900, -8.2400, -4.0300, 5.6300, 49.0700, 117.5400, 2.3100, -8.6100, -3.5000, 12.6200, 40.9700, 122.9500, 2.0700, -8.4100, -3.2600, 7.9800, 40.5600, 128.7700, 1.3600, -7.9600, -3.4800, 3.0600, 33.6700, 141.2100, 0.3700, -8.0900, -4.1500, 8.8100, 30.1100, 155.2100, -0.3100, -8.1900, -3.9400, 14.8500, 44.0900, 160.7100, -0.6300, -7.4500, -3.5300, 17.9000, 52.1500, 172.1100, -1.5700, -6.7600, -3.1600, 21.7600, 43.6700, 185.2700, -2.9500, -7.3500, -3.4500, 31.1500, 28.4000, 182.4600, -3.3700, -7.5600, -2.8500, 33.5600, 29.7000, 174.1100, -3.3600, -7.4000, -2.4500, 25.9300, 39.6900, 172.8900, -3.5400, -6.3700, -1.9700, 16.9800, 51.9900, 190.2600, -4.2800, -5.8600, -2.2600, 5.1100, 54.2200, 197.4000, -5.6000, -5.5500, -2.8400, 5.4900, 44.2400, 198.8700, -6.6100, -5.1200, -3.2500, 7.2700, 44.4900, 197.8900, -7.4300, -5.0900, -3.6200, 16.3300, 61.1000, 194.5900, -7.7700, -5.0100, -3.7900, 9.8000, 92.0900, 187.3800, -8.0700, -4.2400, -3.6800, 9.0600, 97.6500, 170.4600, -7.8400, -4.7000, -3.1100, 10.3100, 70.4100, 151.7900, -8.2500, -5.4100, -3.1400, 1.9400, 46.8500, 133.9300, -8.2300, -4.5900, -3.8200, -10.5100, 35.0100, 116.9200, -8.1200, -3.2600, -4.7800, -13.9700, 31.6900, 108.7900, -8.4000, -2.7800, -5.1800, -8.0400, 30.5000, 110.8800, -8.4200, -3.5800, -4.5800, -2.9900, 25.4000, 105.7600, -8.4600, -3.2000, -4.7700, 0.6300, 16.6100, 90.4100, -8.4500, -2.1300, -4.8000, 9.5300, 12.7500, 82.3900, -8.3400, -1.6400, -4.3200, 14.6600, 15.8400, 88.4700, -8.7500, -2.3000, -3.7900, 13.0600, 22.8200, 93.8900, -9.2400, -2.1600, -3.9700, 9.1300, 26.2000, 84.7700, -9.0000, -1.7400, -3.9400, 4.0600, 25.7600, 72.5800, -8.7100, -1.2400, -3.7000, -1.8500, 14.1700, 76.6500, -9.3200, -1.1100, -4.3700, -16.2700, 7.2200, 85.2100, -10.4800, -1.3000, -5.5500, -24.7600, 15.0500, 82.7600, -11.3300, -0.6900, -6.7300, -16.4000, 21.0800, 65.7800, -11.7000, -0.4200, -7.0700, -5.5300, 32.5300, 55.5800, -11.9700, -0.5100, -7.3800, -4.0500, 32.5500, 42.6400, -12.1000, -0.4400, -7.3900, 4.2700, 27.2100, 30.7100, -12.3300, 0.1700, -7.5400, 12.7800, 24.4700, 23.0500, -12.6800, 0.5100, -7.1400, 18.1600, 14.2500, 19.0200, -13.3500, 0.4800, -6.7300, 18.2500, -2.0500, 3.9900, -14.3700, -0.2700, -7.0600, 21.4400, -12.4200, -23.4200, -14.3200, -0.1600, -6.7100, 29.2300, -2.9600, -51.2000, -13.5000, -0.1500, -6.0100, 30.4400, -4.3700, -73.1200, -13.0500, -0.4000, -5.7700, 27.8500, -13.4400, -97.0400, -12.8200, -0.2300, -6.2000, 26.2400, -18.6800, -114.5400, -12.2200, -0.2200, -6.2300, 30.7600, -25.0100, -129.1800, -11.7900, -0.5400, -5.8700, 32.3100, -31.6600, -140.8900, -11.8000, -0.8900, -5.9700, 28.3500, -39.9500, -156.5300, -11.4700, -1.4700, -5.3200, 31.6300, -45.5100, -179.9900, -10.3400, -1.3600, -4.6000, 25.4100, -45.9200, -194.3800, -9.4400, -1.7000, -4.5600, 19.7200, -50.3700, -205.7300, -8.2500, -2.1900, -4.1700, 18.2400, -50.7400, -211.6500, -7.1700, -2.6800, -3.6600, 14.2200, -50.4200, -217.3500, -6.2100, -3.2200, -3.1700, 10.1300, -62.5600, -218.2600, -5.2500, -3.8200, -2.9000, 3.6900, -67.0800, -223.8100, -3.9900, -4.3500, -2.8500, -8.1000, -67.3600, -222.2400, -3.5400, -4.7500, -2.9400, -12.6400, -73.0200, -214.7000, -3.0900, -5.4300, -3.0800, -15.2500, -80.6100, -209.0300, -2.5300, -6.0100, -3.1900, -17.5100, -84.2000, -212.9900, -1.9200, -6.4500, -3.2500, -19.1500, -83.8400, -212.3400, -1.4600, -6.4900, -3.6600, -19.0400, -87.7300, -219.2700, -0.7900, -6.5400, -4.3500, -14.7900, -74.4000, -223.5000, -0.4000, -6.4700, -4.5200, -6.2400, -61.2100, -215.9900, 1.0700, -7.1200, -4.2500, 4.7900, -40.2900, -207.8200, 2.6300, -7.4200, -3.6100, 9.6600, -21.7300, -193.3000, 3.7200, -7.5600, -3.2300, 12.1100, -29.1200, -176.5800, 4.7000, -7.6200, -3.3700, 16.8400, -42.1600, -153.5400, 5.3000, -7.8100, -3.5100, 23.5300, -49.1900, -121.3900, 4.9600, -7.8800, -3.5700, 29.4500, -58.2000, -93.5200, 4.6700, -8.1700, -3.2200, 33.7800, -54.7900, -70.8600, 4.1600, -8.5700, -2.9100, 32.3700, -49.3100, -62.5900, 3.9200, -8.6800, -2.7700, 36.0300, -54.5800, -61.5300, 4.5500, -8.8500, -2.2900, 27.7300, -43.6400, -55.8600, 5.5000, -8.8500, -1.8000, 18.1000, -25.9600, -42.6200, 6.2500, -8.7600, -1.6100, 2.0800, -9.5600, -24.0600, 6.1100, -8.6700, -1.9100, -14.0700, 8.1000, -6.1800, 5.8700, -8.2800, -2.5300, -19.9900, 18.5700, 0.1100, 6.3000, -8.1300, -2.7100, -20.5700, 18.0900, 0.4900, 6.9400, -7.9000, -2.9800, -14.7500, 6.7300, 12.3200, 7.2200, -8.0100, -2.9500, -7.6600, 1.8900, 34.9500, 7.0800, -8.0700, -2.7800, -3.8500, 6.0000, 62.8900, 6.4100, -8.3800, -2.5400, -2.8100, 10.8200, 88.0500, 5.4800, -8.0300, -2.5700, -4.7500, 7.6900, 109.3500, 4.1600, -7.9300, -2.9400, -4.9500, 7.5300, 122.2700, 3.0100, -8.0600, -3.5400, -1.3700, 1.8200, 128.2000, 1.8600, -8.1300, -3.9900, 13.7000, 6.2400, 127.8500, 1.2900, -8.3900, -3.9200, 22.0200, 14.5700, 127.9200, 1.3000, -8.6800, -3.1500, 27.1100, 23.2700, 127.4700, 1.1700, -8.5200, -2.5300, 23.4200, 35.7400, 136.0400, 1.0600, -8.3500, -1.9200, 22.9200, 34.1900, 150.3700, 0.7800, -7.9800, -1.7800, 16.2200, 31.5100, 170.7000, 0.1000, -7.3700, -1.9100, 11.4600, 25.6400, 184.3900, -0.7600, -6.5600, -2.2000, 15.6600, 21.7400, 204.5600, -1.9100, -6.4000, -2.5300, 19.3700, 21.2500, 224.4300, -3.3500, -6.1600, -3.1700, 23.3700, 32.6900, 231.7900, -4.5100, -5.7600, -3.1600, 33.9000, 44.9800, 229.3700, -4.8700, -5.2000, -2.5800, 37.2300, 62.7700, 236.4000, -5.5800, -4.4900, -2.4800, 31.9600, 74.5600, 249.0200, -7.1700, -4.1900, -3.1300, 31.3700, 67.4600, 233.7700, -9.0400, -5.1300, -3.2800, 39.1800, 51.1800, 204.7300, -9.5400, -5.2000, -1.6400, 34.2400, 47.4900, 168.5300, -9.1700, -4.5400, -1.7100, 18.9800, 64.2400, 154.0700, -9.1100, -3.9300, -2.3900, -2.6500, 72.0800, 154.8200, -9.0500, -3.5000, -3.5300, -5.2300, 60.0200, 138.6000, -8.8000, -2.6900, -3.6200, 0.6100, 37.2200, 123.0700, -8.9400, -1.8500, -2.6800, 3.9100, 14.9500, 123.3200, -10.0500, -2.7200, -2.7000, -5.9100, 8.9900, 121.9100, -10.5400, -2.9900, -3.3300, -14.6800, 16.6600, 111.5300, -10.0000, -1.8900, -3.7800, -8.7800, 25.2400, 93.6100, -9.7300, -0.3000, -3.7200, -2.9100, 19.7400, 89.4100, -9.8200, -1.4200, -3.1900, -2.8900, 13.1300, 93.6900, -10.2500, -1.8200, -3.4500, -8.9000, 9.8900, 87.0500, -10.5100, -0.9600, -4.3000, -8.9600, 24.3800, 83.1000, -10.3500, -0.1600, -4.1600, -4.0300, 35.5600, 79.0800, -10.5000, -0.1700, -3.3600, -4.5800, 26.6000, 73.9800, -10.7200, -0.9400, -3.2400, -9.1500, 21.0800, 66.4100, -10.5900, -0.7600, -3.9400, -13.9200, 24.4000, 56.4500, -10.1800, 0.1500, -4.5700, -12.1900, 32.6600, 53.2200, -9.6200, 1.0600, -5.0600, -5.2100, 35.7700, 53.0800, -10.0200, 1.7700, -4.7900, 5.5000, 20.4100, 63.6100, -11.3100, 1.9100, -4.7800, 7.2400, -2.7500, 68.4400, -13.3500, 2.2300, -5.2900, 5.4100, -10.0200, 71.2000, -15.3900, 2.3900, -6.3400, 6.4000, -7.2200, 64.9000, -17.2100, 1.2500, -6.2100, 12.6000, -10.5600, 26.6000, -17.4300, 0.4400, -6.0800, 13.9600, -0.1000, -24.0000, -16.4300, 0.9800, -5.6000, 14.8100, -2.2900, -76.3200, -15.0000, 1.8200, -5.4600, 14.8100, -6.6300, -110.4300, -13.6000, 1.8100, -5.3200, 19.6200, -5.2500, -128.7900, -12.9200, 1.7800, -5.5900, 22.9800, -6.5400, -147.2700, -12.2800, 1.6400, -5.7600, 32.3400, -8.0700, -156.4500, -11.7800, 0.9700, -4.9100, 41.1000, -7.9000, -171.4700, -10.7200, 0.1000, -3.6400, 45.3400, -20.6700, -187.7000, -10.6100, -0.5200, -3.5700, 32.2700, -26.3100, -200.3000, -9.9300, -0.7200, -4.0500, 24.5800, -33.1800, -210.9300, -8.8200, -0.5500, -4.0700, 28.0400, -31.4400, -210.6300
};

/**
 * @brief      Copy raw feature data in out_ptr
 *             Function called by inference library
 *
 * @param[in]  offset   The offset
 * @param[in]  length   The length
 * @param      out_ptr  The out pointer
 *
 * @return     0
 */
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}


/**
 * @brief      Arduino setup function
 */
void setup()
{
    // put your setup code here, to run once:
    Serial.begin(115200);

    Serial.println("Edge Impulse Inferencing Demo");
}

/**
 * @brief      Arduino main function
 */
void loop()
{
    ei_printf("Edge Impulse standalone inferencing (Arduino)\n");

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        ei_printf("The size of your 'features' array is not correct. Expected %lu items, but had %lu\n",
            EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        delay(1000);
        return;
    }

    ei_impulse_result_t result = { 0 };

    // the features are stored into flash, and we don't want to load everything into RAM
    signal_t features_signal;
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
    features_signal.get_data = &raw_feature_get_data;

    // invoke the impulse
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false /* debug */);
    ei_printf("run_classifier returned: %d\n", res);

    if (res != 0) return;

    // print the predictions
    ei_printf("Predictions ");
    ei_printf("(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)",
        result.timing.dsp, result.timing.classification, result.timing.anomaly);
    ei_printf(": \n");
    ei_printf("[");
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        ei_printf("%.5f", result.classification[ix].value);
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        ei_printf(", ");
#else
        if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
            ei_printf(", ");
        }
#endif
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("%.3f", result.anomaly);
#endif
    ei_printf("]\n");

    // human-readable predictions
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        ei_printf("    %s: %.5f\n", result.classification[ix].label, result.classification[ix].value);
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("    anomaly score: %.3f\n", result.anomaly);
#endif

    delay(1000);
}

/**
 * @brief      Printf function uses vsnprintf and output using Arduino Serial
 *
 * @param[in]  format     Variable argument list
 */
void ei_printf(const char *format, ...) {
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    va_end(args);

    if (r > 0) {
        Serial.write(print_buf);
    }
}
